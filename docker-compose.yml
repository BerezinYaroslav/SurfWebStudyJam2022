version: "3.9"

x-db-cred: &db-cred
  DB_HOST: db-service
  DB_ADDR: db-service
  DB_USER: ${DB_USER}
  DB_PASSWORD: ${DB_PASSWORD}

x-healthcheck-params: &healthcheck-params
  interval: 30s
  timeout: 20s
  retries: 3

services:
  db-service:
    restart: unless-stopped
    image: 'postgres:14.1-alpine'
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      <<: *healthcheck-params

  pgadmin-service:
    restart: unless-stopped
    image: dpage/pgadmin4
    depends_on:
      db-service:
        condition: service_healthy
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "80:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    healthcheck:
      test: [ "CMD", "wget", "-qO", "-", "http://0.0.0.0:80/misc/ping" ]
      <<: *healthcheck-params
  
  keycloak-service:
    restart: unless-stopped
    image: jboss/keycloak
    depends_on:
      db-service:
        condition: service_healthy
    environment:
      DB_VENDOR: POSTGRES
      <<: *db-cred
      DB_DATABASE: surfwebstudyjam_keycloak
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
    ports:
      - "8888:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://0.0.0.0:8080/auth/realms/master/" ]
      <<: *healthcheck-params

  zookeeper-service:
    restart: unless-stopped
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: "zookeeper-service:2888:3888"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
      - zookeeper_secrets:/etc/zookeeper/secrets
    healthcheck:
      test: "curl -f http://0.0.0.0:8080/commands/ruok | grep '\"error\" : null'"
      <<: *healthcheck-params

  kafka-service:
    restart: unless-stopped
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper-service:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-service:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-service:29092,PLAINTEXT_HOST://kafka-service:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_secrets:/etc/kafka/secrets
    healthcheck:
      test: [ "CMD", "nc", "-z", "0.0.0.0", "9092" ]
      <<: *healthcheck-params

  kafka-ui-service:
    restart: unless-stopped
    image: provectuslabs/kafka-ui
    depends_on:
      kafka-service:
          condition: service_healthy
    environment:
       SERVER_PORT: 9094
       KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTERS_0_NAME}
       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka-service:29092"
       AUTH_TYPE: LOGIN_FORM
       SPRING_SECURITY_USER_NAME: ${KAFKA_UI_ADMIN_USERNAME}
       SPRING_SECURITY_USER_PASSWORD: ${KAFKA_UI_ADMIN_PASSWORD}
    ports:
      - "9094:9094"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:9094/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  kafka-init-service:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka-service:
          condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'List topics from broker...'
      kafka-topics --bootstrap-server kafka-service:29092 --list
      
      echo -e 'Creating kafka topics on broker...'
      kafka-topics --bootstrap-server kafka-service:29092 --create --if-not-exists --topic receiving-request-topic --replication-factor 1 --partitions 3
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-service:29092 --list
      "
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_secrets:/etc/kafka/secrets

  minio-service:
    restart: unless-stopped
    image: minio/minio:latest
    command: 
      server --console-address ":9001" /data/
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      <<: *healthcheck-params

  quiz-service:
    restart: unless-stopped
    build:
      context: quiz
      dockerfile: Dockerfile
    image: quiz
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
    ports:
      - "8087:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  defence-service:
    restart: unless-stopped
    build:
      context: defenceOfProject
      dockerfile: Dockerfile
    image: defence
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
    ports:
      - "8086:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  auth-service:
    restart: unless-stopped
    build:
      context: auth
      dockerfile: Dockerfile
    image: auth
    depends_on:
      keycloak-service:
          condition: service_healthy
      db-service:
          condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
      KEYCLOAK_HOST: keycloak-service:8080
      KEYCLOAK_REALM_NAME: ${KEYCLOAK_REALM_NAME}
      KEYCLOAK_REALM_CERTS_RS256: ${KEYCLOAK_REALM_CERTS_RS256}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      <<: *db-cred
      DB_NAME: surfwebstudyjam_auth
    ports:
      - "8085:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  testing-service:
    restart: unless-stopped
    build:
      context: testing
      dockerfile: Dockerfile
    image: testing
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
    ports:
      - "8084:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  mail-service:
    restart: unless-stopped
    build:
      context: mail
      dockerfile: Dockerfile
    image: mail
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
    ports:
      - "8083:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  report-service:
    restart: unless-stopped
    build:
      context: report
      dockerfile: Dockerfile
    image: report
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
    ports:
      - "8082:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  external-files-service:
    restart: unless-stopped
    build:
      context: external-files
      dockerfile: Dockerfile
    image: external-files
    depends_on:
      minio-service:
          condition: service_healthy
      db-service:
          condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
      <<: *db-cred
      DB_NAME: surfwebstudyjam_core
      S3_URL: http://minio-service
      S3_HOST: 9000
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      MAX_FILE_SIZE: 30MB
      MAX_REQ_SIZE: 30MB
      CLAIM_INTERVAL_SECONDS: 3600
    ports:
      - "8081:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/external-files/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  core-service:
    restart: unless-stopped
    build:
      context: core
      dockerfile: Dockerfile
    image: core
    depends_on:
      db-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      external-files-service:
        condition: service_healthy
      mail-service:
        condition: service_healthy
      testing-service:
        condition: service_healthy
      quiz-service:
        condition: service_healthy
      report-service:
        condition: service_healthy
      defence-service:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
      <<: *db-cred
      DB_NAME: surfwebstudyjam_core
      KAFKA_HOST: kafka-service:9092
      AUTH_API: http://auth-service/credentialsServiceApi
      EXI_FILES_API: http://external-files-service/external-files/s3FileServiceApi
    ports:
      - "8080:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/core/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

  gateway-service:
    restart: unless-stopped
    build:
      context: api-gateway
      dockerfile: Dockerfile
    image: gateway
    depends_on:
      core-service:
          condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 80
      CORE_URL: http://core-service
      EXT_FILES_URL: http://external-files-service
    ports:
      - "8088:80"
    healthcheck:
      test: "wget -qO - http://0.0.0.0:80/actuator/health | grep '\"status\":\"UP\"'"
      <<: *healthcheck-params

volumes:
  postgres:
  pgadmin:
  zookeeper_data:
  zookeeper_logs:
  zookeeper_secrets:
  kafka_data:
  kafka_secrets:
  minio:
